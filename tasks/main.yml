---
- name: Gather facts (for ansible_distribution etc.)
  ansible.builtin.setup:

# Build __backends deterministically (no funky filters)
- name: Build backends (stable order & ports)
  ansible.builtin.set_fact:
    __backends: >-
      {%- set out = [] -%}
      {%- set start = role_iptvservice__proxy_start_port | int -%}
      {%- set idx = namespace(v=0) -%}
      {%- for prov in (role_iptvservice__credentials | sort(attribute='name')) -%}
        {%- for cred in (prov.provider_credentials | sort(attribute='account')) -%}
          {%- set _ = out.append({
            'name': 'up' ~ (idx.v + 1),
            'provider': prov.name,
            'provider_url': prov.url,
            'account': cred.account,
            'xtream_user': cred.username,
            'xtream_pass': cred.password,
            'proxy_user': cred.account,
            'proxy_pass': cred.account,
            'port': start + idx.v
          }) -%}
          {%- set idx.v = idx.v + 1 -%}
        {%- endfor -%}
      {%- endfor -%}
      {{ out }}

# Merge all proxy_users into a single dict the app will read
- name: Build users dict
  ansible.builtin.set_fact:
    __users: >-
      {%- set d = {} -%}
      {%- for prov in role_iptvservice__credentials -%}
        {%- for u in prov.proxy_users | default([]) -%}
          {%- set _ = d.update({
            u.username: {
              'password': u.password,
              'live': (u.live | default('true')) | string | lower,
              'vod':  (u.vod  | default('true')) | string | lower
            }
          }) -%}
        {%- endfor -%}
      {%- endfor -%}
      {{ d }}

# Continue with the rest of the role
- name: Setup iptv-auth app
  ansible.builtin.include_tasks: auth.yml

- name: Setup iptv-proxy instances
  ansible.builtin.include_tasks: proxy.yml

- name: Setup nginx site
  ansible.builtin.include_tasks: nginx.yml
