---
- name: Gather facts (for ansible_distribution etc.)
  ansible.builtin.setup:
  tags: always

# Build __effective_backends deterministically (no funky filters)
- name: Build backends (stable order & ports)
  ansible.builtin.set_fact:
    __effective_backends: >-
      {%- set out = [] -%}
      {%- set start = role_iptvservice__proxy_start_port | int -%}
      {%- set idx = namespace(v=0) -%}
      {%- for prov in (role_iptvservice__credentials | sort(attribute='name')) -%}
        {%- for cred in (prov.provider_credentials | sort(attribute='account')) -%}
          {%- set _ = out.append({
            'name': 'up' ~ (idx.v + 1),
            'provider': prov.name,
            'provider_url': prov.url,
            'account': cred.account,
            'xtream_user': cred.username,
            'xtream_pass': cred.password,
            'proxy_user': cred.account,
            'proxy_pass': cred.account,
            'port': start + idx.v
          }) -%}
          {%- set idx.v = idx.v + 1 -%}
        {%- endfor -%}
      {%- endfor -%}
      {{ out }}
  tags: always

- name: Quarantine | Load list (if present)
  ansible.builtin.slurp:
    src: "{{ role_iptvservice__quarantine_path }}"
  register: __quarantine_raw
  ignore_errors: true
  changed_when: false
  tags: always

- name: Quarantine | Parse list
  ansible.builtin.set_fact:
    quarantine_accounts: >-
      {{
        (__quarantine_raw.content | default('') | b64decode | from_json)
        if (__quarantine_raw is defined and __quarantine_raw is not failed and __quarantine_raw.content is defined)
        else []
      }}
  tags: always

- name: Backends | Apply quarantine
  ansible.builtin.set_fact:
    __effective_backends: "{{ __effective_backends | rejectattr('account', 'in', quarantine_accounts) | list }}"
  tags: always

# Merge all proxy_users into a single dict the app will read
- name: Build users dict
  ansible.builtin.set_fact:
    __users: >-
      {%- set d = {} -%}
      {%- for prov in role_iptvservice__credentials -%}
        {%- for u in prov.proxy_users | default([]) -%}
          {%- set _ = d.update({
            u.username: {
              'password': u.password,
              'live': (u.live | default('true')) | string | lower,
              'vod':  (u.vod  | default('true')) | string | lower
            }
          }) -%}
        {%- endfor -%}
      {%- endfor -%}
      {{ d }}
  tags: always

# Continue with the rest of the role
- name: Setup iptv-auth app
  ansible.builtin.include_tasks:
    file: auth.yml
    apply:
      tags: iptvproxy
  tags: iptvproxy

- name: "Include firewall tasks (if managed)"
  ansible.builtin.include_tasks:
    file: firewall.yml
    apply:
      tags: iptvproxy
  when: role_iptvservice__manage_firewall | default(true) | bool
  tags: iptvproxy

- name: Setup iptv-proxy instances
  ansible.builtin.include_tasks:
    file: proxy.yml
    apply:
      tags: iptvproxy
  tags: iptvproxy

- name: Setup nginx site
  ansible.builtin.include_tasks:
    file: nginx.yml
    apply:
      tags: iptvproxy
  tags: iptvproxy

- name: "Include upstream_accounts tasks"
  ansible.builtin.include_tasks:
    file: upstream_accounts.yml
    apply:
      tags: upstream_accounts
  tags: upstream_accounts

- name: "Include numconnections tasks"
  ansible.builtin.include_tasks:
    file: numconnections.yml
    apply:
      tags: numconnections
  tags: numconnections

- name: "Include dailyconnections tasks"
  ansible.builtin.include_tasks:
    file: dailyconnections.yml
    apply:
      tags: dailyconnections
  tags: dailyconnections

- name: "Include report_concurrency tasks"
  ansible.builtin.include_tasks:
    file: report_user_concurrency.yml
    apply:
      tags: report_concurrency
  tags: report_concurrency
...
