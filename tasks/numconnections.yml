---
# Number Connections — detect overloaded upstreams and quarantine them

- name: "Number Connections | Gather facts on sockets"
  community.general.listen_ports_facts:
    include_non_listening: true

- name: "Number Connections | Build overload summary from __effective_backends"
  ansible.builtin.set_fact:
    __ports_summary: >-
      {%- set out = [] -%}
      {%- set maxc = (role_iptvservice__max_connections | int) -%}
      {%- set lip  = role_iptvservice__firewall_local_ip -%}
      {%- for be in __effective_backends -%}
        {%- set conns = (
          ansible_facts.tcp_listen
          | selectattr('state', 'equalto', 'ESTABLISHED')
          | selectattr('name',  'equalto', 'iptv-proxy')
          | selectattr('address','equalto', lip)
          | rejectattr('foreign_address', 'match', lip)
          | selectattr('port',   'equalto', be.port)
          | list
        ) | length -%}
        {%- if conns >= maxc -%}
          {%- set _ = out.append({
            'provider': be.provider,
            'account':  be.account,
            'port':     be.port,
            'established': conns
          }) -%}
        {%- endif -%}
      {%- endfor -%}
      {{ out }}

- name: "Number Connections | When overloaded accounts are found"
  when: (__ports_summary | length) > 0
  block:

    - name: "Quarantine | Remove ACCEPT rule for overloaded port(s)"
      ansible.builtin.iptables:
        chain: INPUT
        protocol: tcp
        destination_port: "{{ item.port }}"
        jump: ACCEPT
        state: absent
      become: true
      loop: "{{ __ports_summary }}"
      loop_control:
        label: "Del ACCEPT {{ item.account }}:{{ item.port }} ({{ item.established }} conns)"
      register: __rm_accept

    - name: "Quarantine | Ensure REJECT for overloaded port(s)"
      ansible.builtin.iptables:
        chain: INPUT
        protocol: tcp
        destination_port: "{{ item.port }}"
        jump: REJECT
        reject_with: icmp-port-unreachable
        state: present
      become: true
      loop: "{{ __ports_summary }}"
      loop_control:
        label: "Add REJECT {{ item.account }}:{{ item.port }}"
      register: __add_reject

    - name: "Quarantine | (Optional) LOG attempts hitting quarantined port(s)"
      ansible.builtin.iptables:
        chain: INPUT
        protocol: tcp
        destination_port: "{{ item.port }}"
        jump: LOG
        log_prefix: "Firewall - IPTV QUAR: "
        state: present
      become: true
      loop: "{{ __ports_summary }}"
      loop_control:
        label: "Add LOG {{ item.account }}:{{ item.port }}"
      when: (role_iptvservice__manage_firewall | default(true) | bool)

    - name: "Kill | Find iptv-proxy PID for each overloaded port"
      community.general.pids:
        pattern: "/usr/bin/iptv-proxy --port {{ item.port }}"
      become: true
      loop: "{{ __ports_summary }}"
      loop_control:
        label: "Find PID {{ item.account }}:{{ item.port }}"
      register: __proxy_pids

    - name: "Kill | Terminate overloaded iptv-proxy processes"
      ansible.builtin.command:
        cmd: kill "{{ item.pids[0] }}"
      become: true
      loop: "{{ __proxy_pids.results | selectattr('pids', 'defined') | selectattr('pids', 'length') | list }}"
      loop_control:
        label: "Kill PID {{ item.pids[0] }}"
      changed_when: true

    - name: "Report | Email summary of quarantined upstreams"
      community.general.mail:
        from: "{{ role_iptvservice__email_sender }}"
        to: "{{ role_iptvservice__email_recipients }}"
        subject: "URGENT: IPTV upstreams quarantined (connection cap reached)"
        host: "{{ role_iptvservice__email_server }}"
        port: 25
        secure: never
        body: "{{ __mail_body }}"
      vars:
        __mail_body: |
          The following upstream accounts were quarantined due to excessive ESTABLISHED connections
          (threshold: {{ role_iptvservice__max_connections }}):

          {% for it in __ports_summary -%}
          - Provider: {{ it.provider }}
            Account:  {{ it.account }}
            Port:     {{ it.port }}
            Conns:    {{ it.established }}
          {% endfor %}

          Actions taken:
            • iptables: removed ACCEPT, added REJECT {{ 'and LOG ' if (role_iptvservice__manage_firewall | default(true) | bool) else '' }}for listed ports
            • Killed iptv-proxy process on each port

- name: "Number Connections | No overloaded accounts"
  ansible.builtin.debug:
    msg: "All good — no accounts at or above {{ role_iptvservice__max_connections }} connections."
  when: (__ports_summary | length) == 0
