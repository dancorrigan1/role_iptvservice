---
- name: "Daily Connections | Check if previous day log exists"
  ansible.builtin.stat:
    path: "{{ role_iptvservice__nginx_log_prev_day }}"
  register: __previous_day_log_stat

- name: "Daily Connections | Assert that previous day log exists"
  ansible.builtin.assert:
    that:
      - __previous_day_log_stat.stat.exists | bool
    msg: "Previous Day Log file {{ role_iptvservice__nginx_log_prev_day }} must exist to run a report."
  when: not __previous_day_log_stat.stat.exists | bool

- name: "Daily Connections | Previous day log exists"
  when: __previous_day_log_stat.stat.exists | bool
  block:

    - name: "Daily Connections | Gather minimal facts"
      ansible.builtin.setup:
        gather_subset:
          - '!all'
          - '!min'
          - 'date_time'

    # ------------------------------------------------------------
    # Helpers we can reuse while parsing the log
    # ------------------------------------------------------------

    - name: "Daily Connections | Build port→account/provider maps from __effective_backends"
      ansible.builtin.set_fact:
        __port_to_account: >-
          {%- set d = {} -%}
          {%- for be in __effective_backends -%}
            {%- set _ = d.update({ (be.port | string): be.account }) -%}
          {%- endfor -%}
          {{ d }}
        __port_to_provider: >-
          {%- set d = {} -%}
          {%- for be in __effective_backends -%}
            {%- set _ = d.update({ (be.port | string): be.provider }) -%}
          {%- endfor -%}
          {{ d }}

    - name: "Daily Connections | Slurp previous day access log"
      ansible.builtin.slurp:
        src: "{{ role_iptvservice__nginx_log_prev_day }}"
      register: __log_prev_day

    - name: "Daily Connections | Decode log"
      ansible.builtin.set_fact:
        __full_log: "{{ __log_prev_day.content | b64decode }}"
      no_log: true

    # Keep only IPTV-relevant lines (API, EPG, live paths). Do NOT depend on upstream info being logged.
    - name: "Daily Connections | Filter IPTV lines"
      ansible.builtin.set_fact:
        __iptv_log: >-
          {{
            __full_log.splitlines()
            | select('search', '(/player_api\.php|/xmltv\.php|/live/)')
            | list
          }}
      no_log: true

    # ------------------------------------------------------------
    # Compute used backend ports (if your log_format includes upstream addr like 127.0.0.1:30001)
    # This gracefully handles the case where no upstream port is present.
    # ------------------------------------------------------------
    - name: "Daily Connections | Extract used backend ports (if present in log lines)"
      ansible.builtin.set_fact:
        __used_ports: >-
          {{
            (__iptv_log
             | map('regex_search', (role_iptvservice__firewall_local_ip | regex_escape) ~ ':[0-9]{5}')
             | select('truthy')
             | map('regex_search', '[0-9]{5}$')
             | select('truthy')
             | list
            ) | community.general.counter
          }}

    # If there’s truly *no* activity we’ll avoid template/email later
    - name: "Daily Connections | Any IPTV activity?"
      ansible.builtin.set_fact:
        __has_activity: "{{ (__iptv_log | length) > 0 }}"

    # ------------------------------------------------------------
    # Build list of unique IPs by user. We find a username in either:
    #   - query string (?username=foo) OR
    #   - path (/live/foo/foo/...), (/series|/movie|/timeshift too)
    # ------------------------------------------------------------
    - name: "Daily Connections | Build username list from __users"
      ansible.builtin.set_fact:
        __all_users: "{{ __users.keys() | list | sort }}"

    - name: "Daily Connections | Create list of IPs used by each user"
      ansible.builtin.set_fact:
        __unique_user_ips: >-
          {%- set rows = [] -%}
          {%- for u in __all_users -%}
            {# Lines with ?username=u or /live/u/ or /series/u/ or /movie/u/ or /timeshift/u/ #}
            {%- set user_lines =
                (__iptv_log
                 | select('search', ('username=' ~ (u | regex_escape)))
                 | list)
                + (__iptv_log
                   | select('search', ('/live/' ~ (u | regex_escape) ~ '/'))
                   | list)
                + (__iptv_log
                   | select('search', ('/series/' ~ (u | regex_escape) ~ '/'))
                   | list)
                + (__iptv_log
                   | select('search', ('/movie/' ~ (u | regex_escape) ~ '/'))
                   | list)
                + (__iptv_log
                   | select('search', ('/timeshift/' ~ (u | regex_escape) ~ '/'))
                   | list)
            -%}
            {%- set user_lines = user_lines | unique -%}
            {%- if user_lines | length > 0 -%}
              {%- set ips = (user_lines | map('split', ' ') | map('first') | list | unique) -%}
              {# Try to guess a provider for the user by looking for a port on the same lines #}
              {%- set port_match = (user_lines
                   | map('regex_search', (role_iptvservice__firewall_local_ip | regex_escape) ~ ':[0-9]{5}')
                   | select('truthy')
                   | map('regex_search', '[0-9]{5}$')
                   | select('truthy')
                   | first) -%}
              {%- set provider = (__port_to_provider[port_match] if port_match is defined and port_match in __port_to_provider else 'unknown') -%}
              {%- set _ = rows.append({'user': u, 'ip_list': ips, 'provider': provider}) -%}
            {%- endif -%}
          {%- endfor -%}
          {{ rows }}

    # ------------------------------------------------------------
    # Write out per-user IP files
    # ------------------------------------------------------------
    - name: "Daily Connections | Ensure user_ips directory exists"
      ansible.builtin.file:
        path: "{{ role_iptvservice__iptv_logs_path }}/user_ips"
        state: directory
        mode: '0750'

    - name: "Daily Connections | Add IPs to per-user file"
      ansible.builtin.lineinfile:
        path: "{{ role_iptvservice__iptv_logs_path }}/user_ips/{{ item.0.user }}"
        line: "{{ item.1 }}"
        state: present
        create: true
        mode: '0644'
      loop: "{{ __unique_user_ips | subelements('ip_list') }}"
      loop_control:
        label: "User: {{ item.0.user }} IP: {{ item.1 }}"
      register: __add_ip

    - name: "Daily Connections | Summarize IP add status"
      ansible.builtin.set_fact:
        __ip_status: >-
          {%- set out = [] -%}
          {%- for z in (__unique_user_ips | subelements('ip_list') | zip(__add_ip.results)) -%}
            {%- set pair = z.0 -%}
            {%- set res  = z.1 -%}
            {%- set _ = out.append({
                'user': (pair | first).user,
                'ip':   (pair | last),
                'new':  ('true' if (res.changed | bool) else 'false')
              }) -%}
          {%- endfor -%}
          {{ out }}

    # ------------------------------------------------------------
    # Build port usage table (if your access log shows upstream IP:port)
    # ------------------------------------------------------------
    - name: "Daily Connections | Build port→count list (if any ports were seen)"
      ansible.builtin.set_fact:
        __port_account_map: >-
          {%- set rows = [] -%}
          {%- for kv in (__used_ports | dict2items) -%}
            {%- set p = kv.key -%}
            {%- set c = kv.value -%}
            {%- set acct = (__port_to_account[p] if p in __port_to_account else 'unknown') -%}
            {%- set item = {'port': p, 'count': c, 'account': acct} -%}
            {%- set _ = rows.append(item) -%}
          {%- endfor -%}
          {{ rows }}

    - name: "Daily Connections | Aggregate counts by account"
      ansible.builtin.set_fact:
        __total_connections: >-
          {%- set d = {} -%}
          {%- for row in __port_account_map -%}
            {%- set key = row.account -%}
            {%- set val = (d.get(key, 0) + (row.count | int)) -%}
            {%- set _ = d.update({key: val}) -%}
          {%- endfor -%}
          {{ d }}

    - name: "Daily Connections | Sort aggregated counts"
      ansible.builtin.set_fact:
        __sorted_total_collections: "{{ __total_connections | dictsort }}"

    # ------------------------------------------------------------
    # IP intel (PTR + whois org + most recent timestamp for the IP)
    # ------------------------------------------------------------
    - name: "Daily Connections | Build IP info list"
      ansible.builtin.set_fact:
        __ip_info: >-
          {%- set rows = [] -%}
          {%- set all_ips = (__unique_user_ips | map(attribute='ip_list') | flatten | unique | list) -%}
          {%- for i in all_ips -%}
            {%- set rev = lookup('community.general.dig', i, qtype='PTR', fail_on_error=false, retry_servfail=true) -%}
            {%- set whois_output = lookup('ansible.builtin.pipe', 'whois ' ~ i) | default('', true) -%}
            {%- set whois_lines = whois_output.split('\n') -%}
            {%- set org_line = (whois_lines
                                | select('search', '(?i)^(org-name|orgname|organization|descr|isp|owner|netname)\\s*:')
                                | first | default('')) -%}
            {%- set org = (org_line.split(':', 1)[1] if (':' in org_line) else '') | default('') | trim -%}
            {%- if org == '' -%}
              {%- set org = 'unknown' -%}
            {%- endif -%}
            {%- set recent_line = (__iptv_log | select('search', i) | last | default('')) -%}
            {%- set recent_match = (recent_line | regex_search('\\[(.*?)\\]') | default('', true)) -%}
            {%- set recent = (recent_match | regex_replace('^\\[|\\]$', '') | default('', true)) -%}
            {%- set _ = rows.append({'ip': i, 'reverse': rev, 'org': org, 'recent': recent}) -%}
          {%- endfor -%}
          {{ rows }}

    - name: "Daily Connections | Map users to provider names"
      ansible.builtin.set_fact:
        __user_provider_map: >-
          {%- set mapping = {} -%}
          {%- for row in __unique_user_ips -%}
            {%- set ips = row.ip_list | default([]) -%}
            {%- set providers = [] -%}
            {%- for ip in ips -%}
              {%- set info = (__ip_info | selectattr('ip', '==', ip) | list | first) -%}
              {%- if info is defined and info is not none and info.org is defined and info.org != 'unknown' -%}
                {%- if info.org not in providers -%}
                  {%- set _ = providers.append(info.org) -%}
                {%- endif -%}
              {%- endif -%}
            {%- endfor -%}
            {%- set inferred = (providers | join(', ')) -%}
            {%- if (inferred | length) == 0 -%}
              {%- set inferred = row.provider | default('unknown') -%}
            {%- endif -%}
            {%- if (inferred | length) == 0 -%}
              {%- set inferred = 'unknown' -%}
            {%- endif -%}
            {%- set _ = mapping.update({row.user: inferred}) -%}
          {%- endfor -%}
          {{ mapping }}

    # ------------------------------------------------------------
    # Write reports and email
    # ------------------------------------------------------------
    - name: "Daily Connections | Ensure reports directory exists"
      ansible.builtin.file:
        path: "{{ role_iptvservice__report_path }}"
        state: directory
        mode: '0750'

    - name: "Daily Connections | Template txt report"
      ansible.builtin.template:
        src: report.txt.j2
        dest: "{{ role_iptvservice__report_path }}/{{ ansible_date_time.date }}-iptv-monitor.txt"
        mode: '0600'
      become: true
      vars:
        ports_seen: "{{ __port_account_map | length > 0 }}"
        has_activity: "{{ __has_activity }}"

    - name: "Daily Connections | Template html report"
      ansible.builtin.template:
        src: report.html.j2
        dest: "{{ role_iptvservice__report_path }}/{{ ansible_date_time.date }}-iptv-monitor.html"
        mode: '0600'
      become: true
      vars:
        ports_seen: "{{ __port_account_map | length > 0 }}"
        has_activity: "{{ __has_activity }}"

    - name: "Daily Connections | Slurp report"
      ansible.builtin.slurp:
        src: "{{ role_iptvservice__report_path }}/{{ ansible_date_time.date }}-iptv-monitor.html"
      register: __encoded_report

    - name: "Daily Connections | Decode report"
      ansible.builtin.set_fact:
        __report: "{{ __encoded_report.content | b64decode }}"

    - name: "Daily Connections | Email the report"
      community.general.mail:
        from: "{{ role_iptvservice__email_sender }}"
        to: "{{ role_iptvservice__email_recipients }}"
        subject: "IPTV Monitor for {{ ansible_date_time.date }}"
        host: "{{ role_iptvservice__email_server }}"
        port: 25
        secure: never
        body: "{{ __report }}"
        subtype: html
      become: true

  rescue:
    - name: "Daily Connections | Fail playbook"
      ansible.builtin.fail:
        msg: "Something went wrong with the report."
