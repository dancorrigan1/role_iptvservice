---
- name: "IPTV Proxy | Get starting and ending ports"
  ansible.builtin.set_fact:
    __iptv_starting_port: "{{ __proxy_users | map(attribute='proxy_port') | first }}"
    __iptv_ending_port: "{{ __proxy_users | map(attribute='proxy_port') | last }}"

- name: "IPTV Proxy | Add http user agents map block to nginx.conf"
  ansible.builtin.blockinfile:
    path: /etc/nginx/nginx.conf
    marker: "# -- {mark} ANSIBLE MANAGED BLOCK --"
    insertafter: "http {"
    block: |

      # allowed user agents for iptv proxy
      map $http_user_agent $iptv_agents {
        default 0;
        {% for agent in role_iptvservice__allowed_user_agents %}
        "~*{{ agent }}" 1;
        {% endfor %}
      }
  notify: Reload nginx

- name: "IPTV Proxy | Copy nginx template"
  ansible.builtin.template:
    src: "{{ role_iptvservice__nginx_template }}"
    dest: "{{ role_iptvservice__nginx_conf }}"
    mode: '0640'
  notify: Reload nginx

- name: "IPTV Proxy | Refresh main firewall"
  ansible.builtin.command:
    cmd: "{{ role_iptvservice__firewall_command }}"
  register: __my_firewall_output
  changed_when: __my_firewall_output.rc == 0
  failed_when: __my_firewall_output.rc != 0

- name: "IPTV Proxy | Kill all iptv-proxy processes"
  ansible.builtin.command:
    cmd: pkill -9 iptv-proxy
  ignore_errors: true
  register: __my_killall_output
  changed_when: __my_killall_output.rc == 0
  failed_when: __my_killall_output.rc != 0

- name: "IPTV Proxy | Add ACCEPT rules for all iptv-proxy ports"
  ansible.builtin.iptables:
    chain: INPUT
    protocol: tcp
    destination_ports: "{{ __iptv_starting_port }}:{{ __iptv_ending_port }}"
    jump: ACCEPT
    action: insert
  register: __my_iptables_output
  changed_when: __my_iptables_output.changed | bool

- name: "IPTV Proxy | Add LOG rules for all iptv-proxy ports"
  ansible.builtin.iptables:
    chain: INPUT
    protocol: tcp
    destination_ports: "{{ __iptv_starting_port }}:{{ __iptv_ending_port }}"
    source: "! {{ role_iptvservice__firewall_local_ip }}/32"
    jump: LOG
    action: insert
    log_prefix: "Firewall - IPTV: "
  register: __my_iptables_log_output
  changed_when: __my_iptables_log_output.changed | bool

- name: "IPTV Proxy | Run iptv-proxy for all users"
  ansible.builtin.shell:
    cmd: >
      (
      /usr/bin/nohup /usr/bin/iptv-proxy
      --port "{{ item.proxy_port }}"
      --hostname "{{ role_iptvservice__iptv_hostname | first }}"
      --xtream-user "{{ item.xtream_user }}"
      --xtream-password "{{ item.xtream_pass }}"
      --xtream-base-url "{{ item.provider_url }}"
      --user "{{ item.proxy_username }}"
      --password "{{ item.proxy_pass }}"
      1>> {{ role_iptvservice__iptv_logs_path }}/iptv_{{ item.proxy_username }}.log 2>&1 ) &
  loop: "{{ __proxy_users }}"
  loop_control:
    label: >-
      Starting IPTV Proxy for user '{{ item.proxy_username }}' to '{{ item.xtream_account }}/{{ item.xtream_user }}' on port '{{ item.proxy_port }}''
      ({{ __my_idx + 1 }} / {{ ansible_loop.length }})
    index_var: __my_idx
    extended: true
    extended_allitems: false
  register: __my_iptv_output
  changed_when: __my_iptv_output.rc == 0
  failed_when: __my_iptv_output.rc != 0
