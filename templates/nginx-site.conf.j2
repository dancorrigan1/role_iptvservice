# ==== generated by Ansible ====
# Supports: http://HOST , http://iptv.HOST , http://HOST/<username>

{% set first_host = (role_iptvservice__iptv_hostname | first) | trim %}
{% set all_server_names = role_iptvservice__iptv_hostname | unique %}

map $request_uri $path_user { "~^/([^/?]+)" $1; default ""; }

# Strip /<username>/ prefix for backend API calls
map $uri $api_uri_stripped {
    "~^/[^/]+/(.*\.php)$" "/$1";
    default               $uri;
}

# Flag player_api calls that should bypass response rewriting
map $uri $is_player_api {
    "~*^/player_api\.php$"        1;
    "~*^/[^/]+/player_api\.php$"  1;
    default                        0;
}

map "$is_player_api:$arg_action" $api_simple_table_passthru {
    "~*^1:(?:get_simple_data_table|get_simple_data_table_v2|get_short_epg|get_epg)$" 1;
    default                                                                 0;
}

map $api_simple_table_passthru $player_api_accept_encoding {
    1       $http_accept_encoding;
    default "";
}

{% if role_iptvservice__enable_ua_filter | bool %}
map $http_user_agent $ua_ok {
    default 0;
    {% set re = role_iptvservice__allowed_user_agents | map('regex_escape') | list | join('|') %}
    "~*({{ re }})" 1;
}
{% endif %}

# Prefer host header returned by auth app; else default to primary host
map $upstream_http_x_host $proxy_host_hdr {
    ""      {{ first_host }};
    default $upstream_http_x_host;
}

# log_format
log_format main_ext '$remote_addr - $remote_user [$time_local] "$request" '
   '$status $body_bytes_sent "$http_referer" '
   '"$http_user_agent" '
   '$request_time $upstream_response_time $iptv_agents $upstream_addr $upstream_status';

# ---------- HTTP :80 -> HTTPS redirect ----------
server {
   listen 80;
   server_name {{ all_server_names | join(' ') }};
   return 301 https://$server_name$request_uri;
}

# ---------- HTTPS :443 ----------
server {
    listen 443 ssl;
    server_name {{ all_server_names | join(' ') }};

    access_log /var/log/nginx/{{ first_host }}_access.log main_ext;
    error_log  /var/log/nginx/{{ first_host }}_error.log;

    # SSL
    ssl_certificate     {{ role_iptvservice__iptv_ssl_certificate | default('/etc/letsencrypt/live/' ~ first_host ~ '/fullchain.pem') }};
    ssl_certificate_key {{ role_iptvservice__iptv_ssl_certificate_key | default('/etc/letsencrypt/live/' ~ first_host ~ '/privkey.pem') }};

    # If auth_request returns 401/403, handle here (may carry redirect hint)
    error_page 401 403 = @auth_fail;

    {% if role_iptvservice__enable_ua_filter | bool %}
    if ($ua_ok = 0) { return 403; }
    {% endif %}

    {% for p in role_iptvservice__protected_paths | default([]) %}
    location {{ p.path }} {
      {% for line in p.args | default([]) %}{{ line }}
      {% endfor %}
    }
    {% endfor %}

    # === NO-AUTH OOS CLIP (exact match) ===
    location = /oos.ts {
        # no auth_request here; serve/redirect freely
        return 302 {{ role_iptvservice__oos_url }};
    }

    # ---------- Static favicon without auth ----------
    location = /favicon.ico {
        auth_request off;
        root {{ role_iptvservice__favicon_root }};
        access_log off;
        log_not_found off;
    }

    # ---------- Internal auth endpoint ----------
    location = /_auth {
        internal;
        proxy_pass http://127.0.0.1:{{ role_iptvservice__auth_port }}/auth;

        # Pass client creds/derived info
        proxy_set_header Authorization $http_authorization;
        proxy_set_header X-Q-User     $saved_user;
        proxy_set_header X-Q-Pass     $saved_pass;
        proxy_set_header X-Path-User  $path_user;
        proxy_set_header X-Orig-Args  $saved_args;
        proxy_set_header X-Req-URI    $request_uri;

        proxy_pass_request_body off;
        proxy_set_header Content-Length "";
        access_log /var/log/nginx/{{ first_host }}_auth_access.log main_ext;
    }

    # ---------- Playlists (.m3u8) ----------
    location ~* ^/(?:[^/]+/)?(live|series|movie|timeshift)/([^/]+)/([^/]+)/(.*\.m3u8)$ {
        set $saved_args $args;
        set $saved_user $2;
        set $saved_pass $3;

        auth_request /_auth;

        auth_request_set $backend       $upstream_http_x_backend;
        auth_request_set $basic         $upstream_http_x_basic;
        auth_request_set $proxy_user    $upstream_http_x_proxy_user;
        auth_request_set $proxy_pass    $upstream_http_x_proxy_pass;
        auth_request_set $display_user  $upstream_http_x_display_user;
        auth_request_set $display_pass  $upstream_http_x_display_pass;
        auth_request_set $auth_redirect $upstream_http_x_redirect;

        proxy_pass $backend/$1/$proxy_user/$proxy_pass/$4;

        proxy_set_header Authorization $basic;
        proxy_set_header Host $proxy_host_hdr;

        proxy_set_header Accept-Encoding "";
        gunzip on;

        sub_filter_once off;
        sub_filter_types application/x-mpegURL application/vnd.apple.mpegurl application/octet-stream text/plain text/*;

        sub_filter "/live/$proxy_user/$proxy_pass/"      "/live/$display_user/$display_pass/";
        sub_filter "/series/$proxy_user/$proxy_pass/"    "/series/$display_user/$display_pass/";
        sub_filter "/movie/$proxy_user/$proxy_pass/"     "/movie/$display_user/$display_pass/";
        sub_filter "/timeshift/$proxy_user/$proxy_pass/" "/timeshift/$display_user/$display_pass/";

        {% for port in backend_ports %}
        sub_filter "http://{{ first_host }}:{{ port }}/" "/";
        {% endfor %}

        proxy_http_version 1.1;
        proxy_set_header Connection "";
        proxy_buffering off;
        proxy_request_buffering off;
        proxy_read_timeout 1h;
        send_timeout 1h;
    }

    # ---------- Segments & everything else under media paths ----------
    location ~ ^/(?:[^/]+/)?(live|series|movie|timeshift)/([^/]+)/([^/]+)/(.*)$ {
        set $saved_args $args;
        set $saved_user $2;
        set $saved_pass $3;

        auth_request /_auth;

        auth_request_set $backend       $upstream_http_x_backend;
        auth_request_set $basic         $upstream_http_x_basic;
        auth_request_set $proxy_user    $upstream_http_x_proxy_user;
        auth_request_set $proxy_pass    $upstream_http_x_proxy_pass;
        auth_request_set $auth_redirect $upstream_http_x_redirect;

        proxy_pass $backend/$1/$proxy_user/$proxy_pass/$4;

        proxy_set_header Authorization $basic;
        proxy_set_header Host $proxy_host_hdr;

        # Byte ranges & common client headers
        proxy_set_header Range      $http_range;
        proxy_set_header If-Range   $http_if_range;
        proxy_force_ranges on;

        proxy_set_header Referer    $http_referer;
        proxy_set_header User-Agent $http_user_agent;
        proxy_set_header Accept     $http_accept;
        proxy_set_header Origin     $http_origin;

        proxy_http_version 1.1;
        proxy_set_header Connection "";
        proxy_buffering off;
        proxy_request_buffering off;
        proxy_read_timeout 1h;
        send_timeout 1h;
    }

    # ---------- XMLTV (allow upstream compression to pass through) ----------
    location ~* ^/(?:[^/]+/)?xmltv\.php$ {
        set $saved_args $args;
        set $saved_user $arg_username;
        if ($saved_user = "") { set $saved_user $path_user; }
        set $saved_pass $arg_password;

        auth_request /_auth;

        auth_request_set $backend       $upstream_http_x_backend;
        auth_request_set $basic         $upstream_http_x_basic;
        auth_request_set $fwd_args      $upstream_http_x_rewrite_args;
        auth_request_set $auth_redirect $upstream_http_x_redirect;

        proxy_pass $backend$api_uri_stripped?$fwd_args;

        proxy_set_header Authorization $basic;
        proxy_set_header Host $proxy_host_hdr;
        proxy_set_header Accept-Encoding $http_accept_encoding;

        proxy_http_version 1.1;
        proxy_set_header Connection "";
        proxy_read_timeout 1h;
        send_timeout 1h;
    }

    # ---------- player_api (preserve EPG payloads) ----------
    location ~* ^/(?:[^/]+/)?player_api\.php$ {
        set $saved_args $args;
        set $saved_user $arg_username;
        if ($saved_user = "") { set $saved_user $path_user; }
        set $saved_pass $arg_password;

        auth_request /_auth;

        auth_request_set $backend       $upstream_http_x_backend;
        auth_request_set $basic         $upstream_http_x_basic;
        auth_request_set $fwd_args      $upstream_http_x_rewrite_args;

        auth_request_set $proxy_user    $upstream_http_x_proxy_user;
        auth_request_set $proxy_pass    $upstream_http_x_proxy_pass;
        auth_request_set $display_user  $upstream_http_x_display_user;
        auth_request_set $display_pass  $upstream_http_x_display_pass;
        auth_request_set $desired_ext   $upstream_http_x_desired_ext;
        auth_request_set $auth_redirect $upstream_http_x_redirect;

        set $rewrite_user $display_user;
        if ($api_simple_table_passthru = 1) { set $rewrite_user $proxy_user; }

        set $rewrite_pass $display_pass;
        if ($api_simple_table_passthru = 1) { set $rewrite_pass $proxy_pass; }

        set $rewrite_ext_empty "\"$desired_ext\"";
        if ($api_simple_table_passthru = 1) { set $rewrite_ext_empty "\"\""; }

        set $rewrite_ext_from_null "\"$desired_ext\"";
        if ($api_simple_table_passthru = 1) { set $rewrite_ext_from_null "null"; }

        proxy_pass $backend$api_uri_stripped?$fwd_args;

        proxy_set_header Authorization $basic;
        proxy_set_header Host $proxy_host_hdr;

        proxy_set_header Accept-Encoding $player_api_accept_encoding;
        gunzip on;

        sub_filter_once off;
        sub_filter_types *;

        sub_filter "\"username\":\"$proxy_user\"" "\"username\":\"$rewrite_user\"";
        sub_filter "\"password\":\"$proxy_pass\"" "\"password\":\"$rewrite_pass\"";
        sub_filter "\"container_extension\":\"\"" "\"container_extension\":$rewrite_ext_empty";
        sub_filter "\"container_extension\":null"  "\"container_extension\":$rewrite_ext_from_null";

        {% for port in backend_ports %}
        sub_filter "http://{{ first_host }}:{{ port }}/" "http://$host/";
        {% endfor %}
        sub_filter "\"url\":\"http://{{ first_host }}\"" "\"url\":\"http://$host\"";
        sub_filter "\"url\":\"https://{{ first_host }}\"" "\"url\":\"http://$host\"";
        sub_filter "\"url\":\"{{ first_host }}\"" "\"url\":\"$host\"";

        {% for port in backend_ports %}
        sub_filter "\"port\":{{ port }}" "\"port\":80";
        sub_filter "\"port\":\"{{ port }}\"" "\"port\":\"80\"";
        sub_filter "\"https_port\":{{ port }}" "\"https_port\":443";
        sub_filter "\"https_port\":\"{{ port }}\"" "\"https_port\":\"443\"";
        sub_filter "\"rtmp_port\":{{ port }}" "\"rtmp_port\":80";
        sub_filter "\"rtmp_port\":\"{{ port }}\"" "\"rtmp_port\":\"80\"";
        {% endfor %}

        proxy_http_version 1.1;
        proxy_set_header Connection "";
        proxy_buffering off;
        proxy_request_buffering off;
        proxy_read_timeout 1h;
        send_timeout 1h;
    }

    # ---------- API (get.php, panel_api.php, etc.) ----------
    location / {
        if ($uri = "/") {
          return 302 {{ role_iptvservice__root_redirect }};
        }

        set $saved_args $args;
        set $saved_user $arg_username;
        if ($saved_user = "") { set $saved_user $path_user; }
        set $saved_pass $arg_password;

        auth_request /_auth;

        auth_request_set $backend       $upstream_http_x_backend;
        auth_request_set $basic         $upstream_http_x_basic;
        auth_request_set $fwd_args      $upstream_http_x_rewrite_args;

        auth_request_set $proxy_user    $upstream_http_x_proxy_user;
        auth_request_set $proxy_pass    $upstream_http_x_proxy_pass;
        auth_request_set $display_user  $upstream_http_x_display_user;
        auth_request_set $display_pass  $upstream_http_x_display_pass;
        auth_request_set $desired_ext   $upstream_http_x_desired_ext;
        auth_request_set $auth_redirect $upstream_http_x_redirect;

        proxy_pass $backend$api_uri_stripped?$fwd_args;

        proxy_set_header Authorization $basic;
        proxy_set_header Host $proxy_host_hdr;

        proxy_set_header Accept-Encoding "";
        gunzip on;

        sub_filter_once off;
        sub_filter_types *;

        sub_filter "\"username\":\"$proxy_user\"" "\"username\":\"$display_user\"";
        sub_filter "\"password\":\"$proxy_pass\"" "\"password\":\"$display_pass\"";
        sub_filter "\"container_extension\":\"\"" "\"container_extension\":\"$desired_ext\"";
        sub_filter "\"container_extension\":null"  "\"container_extension\":\"$desired_ext\"";

        {% for port in backend_ports %}
        sub_filter "http://{{ first_host }}:{{ port }}/" "http://$host/";
        {% endfor %}
        sub_filter "\"url\":\"http://{{ first_host }}\"" "\"url\":\"http://$host\"";
        sub_filter "\"url\":\"https://{{ first_host }}\"" "\"url\":\"http://$host\"";
        sub_filter "\"url\":\"{{ first_host }}\"" "\"url\":\"$host\"";

        {% for port in backend_ports %}
        sub_filter "\"port\":{{ port }}" "\"port\":80";
        sub_filter "\"port\":\"{{ port }}\"" "\"port\":\"80\"";
        sub_filter "\"https_port\":{{ port }}" "\"https_port\":443";
        sub_filter "\"https_port\":\"{{ port }}\"" "\"https_port\":\"443\"";
        sub_filter "\"rtmp_port\":{{ port }}" "\"rtmp_port\":80";
        sub_filter "\"rtmp_port\":\"{{ port }}\"" "\"rtmp_port\":\"80\"";
        {% endfor %}

        proxy_http_version 1.1;
        proxy_set_header Connection "";
        proxy_buffering off;
        proxy_request_buffering off;
        proxy_read_timeout 1h;
        send_timeout 1h;
    }

    # ---------- Auth failure handler ----------
    location @auth_fail {
        if ($auth_redirect != "") { return 302 $auth_redirect; }
        return 401;
    }
}
