# Rendered by role_iptvservice — auth-gated proxy with username-prefix support and live-off 302 on segments

{% set first_host = (role_iptvservice__iptv_hostname | first) | trim %}
{% set server_names = (role_iptvservice__iptv_hostname + ['iptv.' ~ first_host, 'test.' ~ first_host]) | unique %}
{% set backend_host = (role_iptvservice__backend_hostname | default('iptv.' ~ first_host)) | trim %}
{% set total_ports = (role_iptvservice__credentials | map(attribute='provider_credentials') | map('length') | list | sum) | default(0, true) %}
{% set start_port = (role_iptvservice__proxy_start_port | int) %}

server {
    listen 80;
    server_name {{ server_names | join(' ') }};

    access_log /var/log/nginx/yiafe_access.log;
    error_log  /var/log/nginx/yiafe_error.log;

    # If /_auth* returns 401/403, handle here (302 only if app asked)
    error_page 401 403 = @auth_fail;

    # ---------------- INTERNAL AUTH ENDPOINTS ----------------
    location = /_auth {
        internal;
        proxy_pass http://127.0.0.1:9100/auth$is_args$args;
        proxy_pass_request_body off;
        proxy_set_header Content-Length "";
        proxy_set_header Authorization $http_authorization;
    }

    location = /_auth_live {
        internal;
        proxy_pass http://127.0.0.1:9100/auth_live$is_args$args;
        proxy_pass_request_body off;
        proxy_set_header Content-Length "";
        proxy_set_header Authorization $http_authorization;
    }

    # ---------------- PLAYER API (LOGIN/METADATA) ----------------
    location = /player_api.php {
        auth_request /_auth?username=$arg_username&password=$arg_password;
        auth_request_set $backend       $upstream_http_x_backend;
        auth_request_set $basic         $upstream_http_x_basic;
        auth_request_set $auth_redirect $upstream_http_x_redirect;

        # guard: if auth didn’t set a backend, don’t 500
        if ($backend = "") { return 401; }

        proxy_pass $backend$request_uri;
        proxy_set_header Authorization $basic;
        proxy_set_header Host $host;
        proxy_http_version 1.1;
        proxy_set_header Connection "";
        proxy_buffering off;

        add_header Cache-Control "no-store, no-cache, must-revalidate, max-age=0";
        add_header Pragma "no-cache";
    }

    # ---------------- PLAYLIST ----------------
    location = /get.php {
        auth_request /_auth?username=$arg_username&password=$arg_password;
        auth_request_set $backend       $upstream_http_x_backend;
        auth_request_set $basic         $upstream_http_x_basic;
        auth_request_set $auth_redirect $upstream_http_x_redirect;

        if ($backend = "") { return 401; }

        proxy_pass $backend$request_uri;
        proxy_set_header Authorization $basic;
        proxy_set_header Host $host;
        proxy_http_version 1.1;
        proxy_set_header Connection "";
        proxy_buffering off;

        add_header Cache-Control "no-store, no-cache, must-revalidate, max-age=0";
        add_header Pragma "no-cache";
    }

    # ---------------- LIVE TS ----------------
    location ~ ^/(?:([^/]+)/)?live/([^/]+)/([^/]+)/(\d+)\.ts$ {
        set $viewer_user $2;
        set $viewer_pass $3;
        set $seg_id      $4;

        auth_request /_auth_live?username=$viewer_user&password=$viewer_pass;
        auth_request_set $backend       $upstream_http_x_backend;
        auth_request_set $basic         $upstream_http_x_basic;
        auth_request_set $auth_redirect $upstream_http_x_redirect;
        auth_request_set $proxy_user    $upstream_http_x_proxy_user;
        auth_request_set $proxy_pass    $upstream_http_x_proxy_pass;

        if ($auth_redirect != "") { return 302 $auth_redirect; }
        if ($backend = "")        { return 401; }

        proxy_pass $backend/live/$proxy_user/$proxy_pass/$seg_id.ts$is_args$args;
        proxy_set_header Authorization $basic;
        proxy_set_header Host $host;
        proxy_http_version 1.1;
        proxy_set_header Connection "";
        proxy_buffering off;
    }

    # ---------------- LIVE M3U8 ----------------
    location ~ ^/(?:([^/]+)/)?live/([^/]+)/([^/]+)/(\d+)\.m3u8$ {
        set $viewer_user $2;
        set $viewer_pass $3;
        set $chan_id     $4;

        auth_request /_auth_live?username=$viewer_user&password=$viewer_pass;
        auth_request_set $backend       $upstream_http_x_backend;
        auth_request_set $basic         $upstream_http_x_basic;
        auth_request_set $auth_redirect $upstream_http_x_redirect;
        auth_request_set $proxy_user    $upstream_http_x_proxy_user;
        auth_request_set $proxy_pass    $upstream_http_x_proxy_pass;

        if ($auth_redirect != "") { return 302 $auth_redirect; }
        if ($backend = "")        { return 401; }

        proxy_pass $backend/live/$proxy_user/$proxy_pass/$chan_id.m3u8$is_args$args;
        proxy_set_header Authorization $basic;
        proxy_set_header Host $host;
        proxy_http_version 1.1;
        proxy_set_header Connection "";
        proxy_buffering off;

        # rewrite backend absolute URLs to stay on this host
        proxy_set_header Accept-Encoding "";
        gunzip on;
        sub_filter_once off;
        sub_filter_types application/x-mpegURL application/vnd.apple.mpegurl application/octet-stream text/plain text/*;
        {% for i in range(0, total_ports) %}
        {% set p = start_port + i %}
        sub_filter "http://{{ backend_host }}:{{ p }}/" "/";
        sub_filter "https://{{ backend_host }}:{{ p }}/" "/";
        {% endfor %}
    }

    # ---------------- VOD / SERIES ----------------
    location ~ ^/(?:([^/]+)/)?(movie|series)/([^/]+)/([^/]+)/(.*)$ {
        set $kind        $2;
        set $viewer_user $3;
        set $viewer_pass $4;
        set $rest        $5;

        auth_request /_auth?username=$viewer_user&password=$viewer_pass;
        auth_request_set $backend       $upstream_http_x_backend;
        auth_request_set $basic         $upstream_http_x_basic;
        auth_request_set $auth_redirect $upstream_http_x_redirect;
        auth_request_set $proxy_user    $upstream_http_x_proxy_user;
        auth_request_set $proxy_pass    $upstream_http_x_proxy_pass;

        if ($backend = "") { return 401; }

        proxy_pass $backend/$kind/$proxy_user/$proxy_pass/$rest$is_args$args;
        proxy_set_header Authorization $basic;
        proxy_set_header Host $host;
        proxy_http_version 1.1;
        proxy_set_header Connection "";
        proxy_buffering off;
    }

    # ---------------- OPTIONAL PROTECTED PATHS ----------------
    {% for item in (role_iptvservice__protected_paths | default([])) %}
    location {{ item.path }} {
        {% for line in (item.args | default([])) %}
        {{ line }}
        {% endfor %}
    }
    {% endfor %}

    # ---------------- USER-PREFIXED FALLBACK ----------------
    location ~ ^/([^/]+)(/.*)?$ {
        set $rest $2;
        if ($rest = "") { set $rest "/"; }

        auth_request /_auth?username=$arg_username&password=$arg_password;
        auth_request_set $backend       $upstream_http_x_backend;
        auth_request_set $basic         $upstream_http_x_basic;
        auth_request_set $auth_redirect $upstream_http_x_redirect;

        if ($backend = "") { return 401; }

        proxy_pass $backend$rest$is_args$args;
        proxy_set_header Authorization $basic;
        proxy_set_header Host $host;
        proxy_http_version 1.1;
        proxy_set_header Connection "";
        proxy_buffering off;
    }

    # ---------------- ROOT FALLBACK ----------------
    location / {
        auth_request /_auth?username=$arg_username&password=$arg_password;
        auth_request_set $backend       $upstream_http_x_backend;
        auth_request_set $basic         $upstream_http_x_basic;
        auth_request_set $auth_redirect $upstream_http_x_redirect;

        if ($backend = "") { return 401; }

        proxy_pass $backend$request_uri;
        proxy_set_header Authorization $basic;
        proxy_set_header Host $host;
        proxy_http_version 1.1;
        proxy_set_header Connection "";
        proxy_buffering off;
    }

    # ---------------- AUTH FAIL HANDLER ----------------
    location @auth_fail {
        if ($auth_redirect != "") { return 302 $auth_redirect; }
        return 401;
    }
}
