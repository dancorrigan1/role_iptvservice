# Rendered by role_iptvservice â€” auth-gated proxy with user-prefix support and JSON rewrite

{% set first_host   = (role_iptvservice__iptv_hostname | first) | trim %}
{% set server_names = (role_iptvservice__iptv_hostname + ['iptv.' ~ first_host, 'test.' ~ first_host]) | unique %}
{% set backend_host = (role_iptvservice__backend_hostname | default('iptv.' ~ first_host)) | trim %}
{% set total_ports  = (role_iptvservice__credentials | map(attribute='provider_credentials') | map('length') | list | sum) | default(0, true) %}
{% set start_port   = (role_iptvservice__proxy_start_port | int) %}

server {
    listen 80;
    server_name {{ server_names | join(' ') }};

    access_log /var/log/nginx/yiafe_access.log;
    error_log  /var/log/nginx/yiafe_error.log;

    add_header X-Vhost $server_name always;

    # If /_auth returns 401/403, handle here (302 only if the app told us to).
    error_page 401 403 = @auth_fail;

    # ---------- Internal auth subrequest ----------
    location = /_auth {
        internal;
        proxy_pass http://127.0.0.1:9100/auth;
        proxy_pass_request_body off;
        proxy_set_header Content-Length "";
        proxy_set_header Authorization $http_authorization;
        proxy_set_header X-Original-URI $request_uri;
    }

    # ---- Helper: JSON rewrite snippet (macro-like) ----
    # We duplicate the sub_filter block in the four API locations.
    # Keeps clients using the same host they hit, and front-end ports.
    # NOTE: sub_filter is literal, so we enumerate possible backend ports.
    #       Also cover url with and without :PORT.
    # BEGIN_JSON_REWRITE
    map "" $dummy_json_rewrite { default ""; }
    # END_JSON_REWRITE

    # ---------- Player API (login, metadata) ----------
    location = /player_api.php {
        auth_request /_auth;
        auth_request_set $backend        $upstream_http_x_backend;
        auth_request_set $basic          $upstream_http_x_basic;
        auth_request_set $auth_redirect  $upstream_http_x_redirect;

        proxy_pass $backend$request_uri;
        proxy_set_header Authorization $basic;
        proxy_set_header Host $host;
        proxy_http_version 1.1; proxy_set_header Connection ""; proxy_buffering off;

        # ---- JSON rewriting ----
        proxy_set_header Accept-Encoding "";  gunzip on;  sub_filter_once off;
        sub_filter_types application/json application/octet-stream text/plain text/*;

        # Force url to current host (with/without :PORT in backend JSON)
        sub_filter "\"url\":\"http://{{ backend_host }}\""        "\"url\":\"$scheme://$host\"";
        sub_filter "\"url\":\"https://{{ backend_host }}\""       "\"url\":\"$scheme://$host\"";
        {% for i in range(0, total_ports) %}
        {% set p = start_port + i %}
        sub_filter "\"url\":\"http://{{ backend_host }}:{{ p }}\""  "\"url\":\"$scheme://$host\"";
        sub_filter "\"url\":\"https://{{ backend_host }}:{{ p }}\"" "\"url\":\"$scheme://$host\"";
        {% endfor %}

        # Force front-end ports (no stray quotes)
        {% for i in range(0, total_ports) %}
        {% set p = start_port + i %}
        sub_filter "\"port\":{{ p }}"        "\"port\":80";
        sub_filter "\"https_port\":{{ p }}"  "\"https_port\":443";
        {% endfor %}

        # Align protocol field to actual scheme
        sub_filter "\"server_protocol\":\"http\""  "\"server_protocol\":\"$scheme\"";
        sub_filter "\"server_protocol\":\"https\"" "\"server_protocol\":\"$scheme\"";

        add_header Cache-Control "no-store, no-cache, must-revalidate, max-age=0";
        add_header Pragma "no-cache";
    }

    # ---------- Playlist ----------
    location = /get.php {
        auth_request /_auth;
        auth_request_set $backend        $upstream_http_x_backend;
        auth_request_set $basic          $upstream_http_x_basic;
        auth_request_set $auth_redirect  $upstream_http_x_redirect;

        proxy_pass $backend$request_uri;
        proxy_set_header Authorization $basic;
        proxy_set_header Host $host;
        proxy_http_version 1.1; proxy_set_header Connection ""; proxy_buffering off;

        # ---- JSON rewriting (same as player_api) ----
        proxy_set_header Accept-Encoding "";  gunzip on;  sub_filter_once off;
        sub_filter_types application/json application/octet-stream text/plain text/*;
        sub_filter "\"url\":\"http://{{ backend_host }}\""        "\"url\":\"$scheme://$host\"";
        sub_filter "\"url\":\"https://{{ backend_host }}\""       "\"url\":\"$scheme://$host\"";
        {% for i in range(0, total_ports) %}
        {% set p = start_port + i %}
        sub_filter "\"url\":\"http://{{ backend_host }}:{{ p }}\""  "\"url\":\"$scheme://$host\"";
        sub_filter "\"url\":\"https://{{ backend_host }}:{{ p }}\"" "\"url\":\"$scheme://$host\"";
        sub_filter "\"port\":{{ p }}"        "\"port\":80";
        sub_filter "\"https_port\":{{ p }}"  "\"https_port\":443";
        {% endfor %}
        sub_filter "\"server_protocol\":\"http\""  "\"server_protocol\":\"$scheme\"";
        sub_filter "\"server_protocol\":\"https\"" "\"server_protocol\":\"$scheme\"";

        add_header Cache-Control "no-store, no-cache, must-revalidate, max-age=0";
        add_header Pragma "no-cache";
    }

    # ---------- Prefixed Player API: /USERNAME/player_api.php ----------
    location ~ ^/[^/]+/player_api\.php$ {
        auth_request /_auth;
        auth_request_set $backend        $upstream_http_x_backend;
        auth_request_set $basic          $upstream_http_x_basic;
        auth_request_set $auth_redirect  $upstream_http_x_redirect;

        # Preserve the rest of the path after the leading /USERNAME
        if ($request_uri ~ "^/[^/]+(/player_api\.php.*)$") { set $rest $1; }
        proxy_pass $backend$rest;

        proxy_set_header Authorization $basic;
        proxy_set_header Host $host;
        proxy_http_version 1.1; proxy_set_header Connection ""; proxy_buffering off;

        # ---- JSON rewriting (same rules) ----
        proxy_set_header Accept-Encoding "";  gunzip on;  sub_filter_once off;
        sub_filter_types application/json application/octet-stream text/plain text/*;
        sub_filter "\"url\":\"http://{{ backend_host }}\""        "\"url\":\"$scheme://$host\"";
        sub_filter "\"url\":\"https://{{ backend_host }}\""       "\"url\":\"$scheme://$host\"";
        {% for i in range(0, total_ports) %}
        {% set p = start_port + i %}
        sub_filter "\"url\":\"http://{{ backend_host }}:{{ p }}\""  "\"url\":\"$scheme://$host\"";
        sub_filter "\"url\":\"https://{{ backend_host }}:{{ p }}\"" "\"url\":\"$scheme://$host\"";
        sub_filter "\"port\":{{ p }}"        "\"port\":80";
        sub_filter "\"https_port\":{{ p }}"  "\"https_port\":443";
        {% endfor %}
        sub_filter "\"server_protocol\":\"http\""  "\"server_protocol\":\"$scheme\"";
        sub_filter "\"server_protocol\":\"https\"" "\"server_protocol\":\"$scheme\"";
    }

    # ---------- Prefixed Playlist: /USERNAME/get.php ----------
    location ~ ^/[^/]+/get\.php$ {
        auth_request /_auth;
        auth_request_set $backend        $upstream_http_x_backend;
        auth_request_set $basic          $upstream_http_x_basic;
        auth_request_set $auth_redirect  $upstream_http_x_redirect;

        if ($request_uri ~ "^/[^/]+(/get\.php.*)$") { set $rest $1; }
        proxy_pass $backend$rest;

        proxy_set_header Authorization $basic;
        proxy_set_header Host $host;
        proxy_http_version 1.1; proxy_set_header Connection ""; proxy_buffering off;

        # ---- JSON rewriting ----
        proxy_set_header Accept-Encoding "";  gunzip on;  sub_filter_once off;
        sub_filter_types application/json application/octet-stream text/plain text/*;
        sub_filter "\"url\":\"http://{{ backend_host }}\""        "\"url\":\"$scheme://$host\"";
        sub_filter "\"url\":\"https://{{ backend_host }}\""       "\"url\":\"$scheme://$host\"";
        {% for i in range(0, total_ports) %}
        {% set p = start_port + i %}
        sub_filter "\"url\":\"http://{{ backend_host }}:{{ p }}\""  "\"url\":\"$scheme://$host\"";
        sub_filter "\"url\":\"https://{{ backend_host }}:{{ p }}\"" "\"url\":\"$scheme://$host\"";
        sub_filter "\"port\":{{ p }}"        "\"port\":80";
        sub_filter "\"https_port\":{{ p }}"  "\"https_port\":443";
        {% endfor %}
        sub_filter "\"server_protocol\":\"http\""  "\"server_protocol\":\"$scheme\"";
        sub_filter "\"server_protocol\":\"https\"" "\"server_protocol\":\"$scheme\"";
    }

    # ---------- LIVE .ts segments (with or without /USERNAME prefix) ----------
    location ~ ^/(?:[^/]+/)?live/([^/]+)/([^/]+)/(\d+)\.ts$ {
        set $cap_user $1; set $cap_pass $2; set $cap_id $3;

        auth_request /_auth;
        auth_request_set $backend $upstream_http_x_backend;
        auth_request_set $basic   $upstream_http_x_basic;
        auth_request_set $auth_redirect $upstream_http_x_redirect;
        auth_request_set $proxy_user $upstream_http_x_proxy_user;
        auth_request_set $proxy_pass $upstream_http_x_proxy_pass;

        proxy_pass $backend/live/$proxy_user/$proxy_pass/$cap_id.ts$is_args$args;
        proxy_set_header Authorization $basic;
        proxy_set_header Host $host;
        proxy_http_version 1.1; proxy_set_header Connection ""; proxy_buffering off;
    }

    # ---------- LIVE .m3u8 playlists ----------
    location ~ ^/(?:[^/]+/)?live/([^/]+)/([^/]+)/(\d+)\.m3u8$ {
        set $cap_user $1; set $cap_pass $2; set $cap_id $3;

        auth_request /_auth;
        auth_request_set $backend $upstream_http_x_backend;
        auth_request_set $basic   $upstream_http_x_basic;
        auth_request_set $auth_redirect $upstream_http_x_redirect;
        auth_request_set $proxy_user $upstream_http_x_proxy_user;
        auth_request_set $proxy_pass $upstream_http_x_proxy_pass;

        proxy_pass $backend/live/$proxy_user/$proxy_pass/$cap_id.m3u8$is_args$args;
        proxy_set_header Authorization $basic;
        proxy_set_header Host $host;
        proxy_http_version 1.1; proxy_set_header Connection ""; proxy_buffering off;

        proxy_set_header Accept-Encoding ""; gunzip on; sub_filter_once off;
        sub_filter_types application/x-mpegURL application/vnd.apple.mpegurl application/octet-stream text/plain text/*;
        {% for i in range(0, total_ports) %}
        {% set p = start_port + i %}
        sub_filter "http://{{ backend_host }}:{{ p }}/" "/";
        sub_filter "https://{{ backend_host }}:{{ p }}/" "/";
        {% endfor %}
    }

    # ---------- VOD/series ----------
    location ~ ^/(?:[^/]+/)?(movie|series)/([^/]+)/([^/]+)/(.*)$ {
        set $kind $1; set $cap_user $2; set $cap_pass $3; set $rest $4;

        auth_request /_auth;
        auth_request_set $backend $upstream_http_x_backend;
        auth_request_set $basic   $upstream_http_x_basic;
        auth_request_set $auth_redirect $upstream_http_x_redirect;
        auth_request_set $proxy_user $upstream_http_x_proxy_user;
        auth_request_set $proxy_pass $upstream_http_x_proxy_pass;

        proxy_pass $backend/$kind/$proxy_user/$proxy_pass/$rest$is_args$args;
        proxy_set_header Authorization $basic;
        proxy_set_header Host $host;
        proxy_http_version 1.1; proxy_set_header Connection ""; proxy_buffering off;
    }

    # ---------- Optional protected paths from vars ----------
    {% for item in (role_iptvservice__protected_paths | default([])) %}
    location {{ item.path }} {
        {% for line in (item.args | default([])) %}
        {{ line }}
        {% endfor %}
    }
    {% endfor %}

    # ---------- User-prefixed generic fallback (/USERNAME/...) ----------
    location ~ ^/([^/]+)(/.*)?$ {
        auth_request /_auth;
        auth_request_set $backend $upstream_http_x_backend;
        auth_request_set $basic   $upstream_http_x_basic;
        auth_request_set $auth_redirect $upstream_http_x_redirect;

        set $rest $2; if ($rest = "") { set $rest "/"; }
        proxy_pass $backend$rest$is_args$args;
        proxy_set_header Authorization $basic;
        proxy_set_header Host $host;
        proxy_http_version 1.1; proxy_set_header Connection ""; proxy_buffering off;
    }

    # ---------- Root fallback ----------
    location / {
        auth_request /_auth;
        auth_request_set $backend $upstream_http_x_backend;
        auth_request_set $basic   $upstream_http_x_basic;
        auth_request_set $auth_redirect $upstream_http_x_redirect;

        proxy_pass $backend$request_uri;
        proxy_set_header Authorization $basic;
        proxy_set_header Host $host;
        proxy_http_version 1.1; proxy_set_header Connection ""; proxy_buffering off;
    }

    # ---------- Auth failure handler ----------
    location @auth_fail {
        if ($auth_redirect != "") { return 302 $auth_redirect; }
        return 401;
    }
}
