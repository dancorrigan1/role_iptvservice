# ==== generated by Ansible ====
# Supports: http://HOST , http://iptv.HOST , http://HOST/<username>

{% set php_fpm  = role_iptvservice__php_fpm  | default('unix:/run/php/php8.3-fpm.sock') %}
{% set web_root = role_iptvservice__web_root | default('/var/www/html/yiafe.com') %}

map $request_uri $path_user { "~^/([^/?]+)" $1; default ""; }

# Strip /<username>/ prefix for backend API calls
map $uri $api_uri_stripped {
    "~^/[^/]+/(.*\.php)$" "/$1";
    default               $uri;
}

{% if role_iptvservice__enable_ua_filter | bool %}
map $http_user_agent $ua_ok {
    default 0;
    {% set re = role_iptvservice__allowed_user_agents | map('regex_escape') | list | join('|') %}
    "~*({{ re }})" 1;
}
{% endif %}

# Prefer host header returned by auth app; else default
map $upstream_http_x_host $proxy_host_hdr {
    ""      iptv.{{ role_iptvservice__iptv_hostname | first }};
    default $upstream_http_x_host;
}

server {
    listen 80;
    server_name {{ (all_server_names | unique) | join(' ') }};

    access_log /var/log/nginx/yiafe_access.log;
    error_log  /var/log/nginx/yiafe_error.log;

    # If auth_request returns 401/403, handle here (may carry redirect hint)
    error_page 401 403 = @auth_fail;

    {% if role_iptvservice__enable_ua_filter | bool %}
    if ($ua_ok = 0) { return 403; }
    {% endif %}

    {% for p in role_iptvservice__protected_paths | default([]) %}
    location {{ p.path }} {
      {% for line in p.args %}{{ line }}
      {% endfor %}
    }
    {% endfor %}

    # === NO-AUTH OOS CLIP (exact match) ===
    location = /oos.ts {
        return 302 https://phishbox.phisher1.com/oos.ts;
    }

    # ==========================================================
    #  LOCAL SITE (NO IPTV AUTH)
    # ==========================================================
    # Root: run /index.php at {{ web_root }}
    location = / {
        root {{ web_root }};
        rewrite ^ /index.php last;
    }

    # PHP for /index.php
    location = /index.php {
        root {{ web_root }};
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_pass {{ php_fpm }};
    }

    # Static convenience
    location ^~ /assets/ {
        root {{ web_root }};
        try_files $uri =404;
    }
    location = /favicon.ico { access_log off; log_not_found off; root {{ web_root }}; }
    location = /robots.txt  { access_log off; log_not_found off; root {{ web_root }}; }

    # Trailing-slash helpers
    location = /calc        { return 301 /calc/; }
    location = /ae          { return 301 /ae/; }
    location = /contact     { return 301 /contact/; }
    location = /iptvservice { return 301 /iptvservice/; }
    location = /curve       { return 301 /curve/; }

    # Local sections (no auth; allow PHP front controllers)
    location /calc/ {
        root {{ web_root }};
        index index.php index.html;
        try_files $uri $uri/ /calc/index.php?$args;
    }
    location /ae/ {
        root {{ web_root }};
        index index.php index.html;
        try_files $uri $uri/ /ae/index.php?$args;
    }
    location /contact/ {
        root {{ web_root }};
        index index.php index.html;
        try_files $uri $uri/ /contact/index.php?$args;
    }
    location /iptvservice/ {
        root {{ web_root }};
        index index.php index.html;
        try_files $uri $uri/ /iptvservice/index.php?$args;
    }
    location /curve/ {
        root {{ web_root }};
        index index.php index.html;
        try_files $uri $uri/ /curve/index.php?$args;
    }

    # PHP inside those local sections ONLY (must be evaluated; don't use ^~ above)
    location ~ ^/(calc|ae|contact|iptvservice|curve)/.+\.php$ {
        root {{ web_root }};
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_pass {{ php_fpm }};
    }

    # ==========================================================
    #  IPTV PROXY (AUTH-GATED) â€” your original working logic
    # ==========================================================

    # Internal auth endpoint
    location = /_auth {
        internal;
        proxy_pass http://127.0.0.1:{{ role_iptvservice__auth_port }}/auth;

        # Pass client creds/derived info
        proxy_set_header Authorization $http_authorization;
        proxy_set_header X-Q-User     $saved_user;
        proxy_set_header X-Q-Pass     $saved_pass;
        proxy_set_header X-Path-User  $path_user;
        proxy_set_header X-Orig-Args  $saved_args;
        proxy_set_header X-Req-URI    $request_uri;

        proxy_pass_request_body off;
        proxy_set_header Content-Length "";
        access_log /var/log/nginx/yiafe_auth_access.log;
    }

    # -------- Playlists (.m3u8) ----------
    location ~* ^/(?:[^/]+/)?(live|series|movie|timeshift)/([^/]+)/([^/]+)/(.*\.m3u8)$ {
        set $saved_args $args;
        set $saved_user $2;
        set $saved_pass $3;

        auth_request /_auth;

        auth_request_set $backend       $upstream_http_x_backend;
        auth_request_set $basic         $upstream_http_x_basic;
        auth_request_set $proxy_user    $upstream_http_x_proxy_user;
        auth_request_set $proxy_pass    $upstream_http_x_proxy_pass;
        auth_request_set $display_user  $upstream_http_x_display_user;
        auth_request_set $display_pass  $upstream_http_x_display_pass;
        auth_request_set $auth_redirect $upstream_http_x_redirect;

        proxy_pass $backend/$1/$proxy_user/$proxy_pass/$4;

        proxy_set_header Authorization $basic;
        proxy_set_header Host $proxy_host_hdr;

        proxy_set_header Accept-Encoding "";
        gunzip on;

        sub_filter_once off;
        sub_filter_types application/x-mpegURL application/vnd.apple.mpegurl application/octet-stream text/plain text/*;

        sub_filter "/live/$proxy_user/$proxy_pass/"      "/live/$display_user/$display_pass/";
        sub_filter "/series/$proxy_user/$proxy_pass/"    "/series/$display_user/$display_pass/";
        sub_filter "/movie/$proxy_user/$proxy_pass/"     "/movie/$display_user/$display_pass/";
        sub_filter "/timeshift/$proxy_user/$proxy_pass/" "/timeshift/$display_user/$display_pass/";

        {% for port in backend_ports %}
        sub_filter "http://{{ 'iptv.' + (role_iptvservice__iptv_hostname|first) }}:{{ port }}/" "/";
        sub_filter "http://{{ (role_iptvservice__iptv_hostname|first) }}:{{ port }}/" "/";
        {% endfor %}

        proxy_http_version 1.1;
        proxy_set_header Connection "";
        proxy_buffering off;
        proxy_request_buffering off;
        proxy_read_timeout 1h;
        send_timeout 1h;
    }

    # -------- Segments & everything else under media paths ----------
    location ~ ^/(?:[^/]+/)?(live|series|movie|timeshift)/([^/]+)/([^/]+)/(.*)$ {
        set $saved_args $args;
        set $saved_user $2;
        set $saved_pass $3;

        auth_request /_auth;

        auth_request_set $backend       $upstream_http_x_backend;
        auth_request_set $basic         $upstream_http_x_basic;
        auth_request_set $proxy_user    $upstream_http_x_proxy_user;
        auth_request_set $proxy_pass    $upstream_http_x_proxy_pass;
        auth_request_set $auth_redirect $upstream_http_x_redirect;

        proxy_pass $backend/$1/$proxy_user/$proxy_pass/$4;

        proxy_set_header Authorization $basic;
        proxy_set_header Host $proxy_host_hdr;

        proxy_set_header Range      $http_range;
        proxy_set_header If-Range   $http_if_range;
        proxy_set_header Referer    $http_referer;
        proxy_set_header User-Agent $http_user_agent;
        proxy_set_header Accept     $http_accept;
        proxy_set_header Origin     $http_origin;
        proxy_force_ranges on;

        proxy_http_version 1.1;
        proxy_set_header Connection "";
        proxy_buffering off;
        proxy_request_buffering off;
        proxy_read_timeout 1h;
        send_timeout 1h;
    }

    # -------- API (player_api.php, get.php, xmltv.php, etc.) ----------
    location / {
        set $saved_args $args;
        set $saved_user $arg_username;
        if ($saved_user = "") { set $saved_user $path_user; }
        set $saved_pass $arg_password;

        auth_request /_auth;

        auth_request_set $backend       $upstream_http_x_backend;
        auth_request_set $basic         $upstream_http_x_basic;
        auth_request_set $fwd_args      $upstream_http_x_rewrite_args;

        auth_request_set $proxy_user    $upstream_http_x_proxy_user;
        auth_request_set $proxy_pass    $upstream_http_x_proxy_pass;
        auth_request_set $display_user  $upstream_http_x_display_user;
        auth_request_set $display_pass  $upstream_http_x_display_pass;
        auth_request_set $desired_ext   $upstream_http_x_desired_ext;
        auth_request_set $auth_redirect $upstream_http_x_redirect;

        proxy_pass $backend$api_uri_stripped?$fwd_args;

        proxy_set_header Authorization $basic;
        proxy_set_header Host $proxy_host_hdr;

        proxy_set_header Accept-Encoding "";
        gunzip on;

        sub_filter_once off;
        sub_filter_types *;

        sub_filter "\"username\":\"$proxy_user\"" "\"username\":\"$display_user\"";
        sub_filter "\"password\":\"$proxy_pass\"" "\"password\":\"$display_pass\"";
        sub_filter "\"container_extension\":\"\"" "\"container_extension\":\"$desired_ext\"";
        sub_filter "\"container_extension\":null"  "\"container_extension\":\"$desired_ext\"";

        {% for port in backend_ports %}
        sub_filter "http://{{ 'iptv.' + (role_iptvservice__iptv_hostname|first) }}:{{ port }}/" "http://$host/";
        sub_filter "http://{{ (role_iptvservice__iptv_hostname|first) }}:{{ port }}/" "http://$host/";
        {% endfor %}
        sub_filter "\"url\":\"http://iptv.{{ role_iptvservice__iptv_hostname | first }}\"" "\"url\":\"http://$host\"";
        sub_filter "\"url\":\"https://iptv.{{ role_iptvservice__iptv_hostname | first }}\"" "\"url\":\"http://$host\"";
        sub_filter "\"url\":\"http://{{ role_iptvservice__iptv_hostname | first }}\"" "\"url\":\"http://$host\"";
        sub_filter "\"url\":\"https://{{ role_iptvservice__iptv_hostname | first }}\"" "\"url\":\"http://$host\"";
        sub_filter "\"url\":\"iptv.{{ role_iptvservice__iptv_hostname | first }}\"" "\"url\":\"$host\"";
        sub_filter "\"url\":\"{{ role_iptvservice__iptv_hostname | first }}\"" "\"url\":\"$host\"";

        {% for port in backend_ports %}
        sub_filter "\"port\":{{ port }}" "\"port\":80";
        sub_filter "\"port\":\"{{ port }}\"" "\"port\":\"80\"";
        sub_filter "\"https_port\":{{ port }}" "\"https_port\":443";
        sub_filter "\"https_port\":\"{{ port }}\"" "\"https_port\":\"443\"";
        sub_filter "\"rtmp_port\":{{ port }}" "\"rtmp_port\":80";
        sub_filter "\"rtmp_port\":\"{{ port }}\"" "\"rtmp_port\":\"80\"";
        {% endfor %}

        proxy_http_version 1.1;
        proxy_set_header Connection "";
        proxy_buffering off;
        proxy_request_buffering off;
        proxy_read_timeout 1h;
        send_timeout 1h;
    }

    # Auth failure handler: if app says where to go, 302 there; else 401
    location @auth_fail {
        if ($auth_redirect != "") { return 302 $auth_redirect; }
        return 401;
    }
}
