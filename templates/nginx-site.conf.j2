# {{ ansible_managed | comment }}

{% for item in __proxy_users | map(attribute='proxy_username') | unique | sort %}
{% set username = item %}
{% set name = __proxy_users | selectattr('proxy_username', '==', username) | map(attribute='proxy_name') | unique | first %}
{% set upstream_ports = __proxy_users | selectattr('proxy_username', '==', username) | map(attribute='proxy_port') %}
{% set provider =  __proxy_users | selectattr('proxy_username', '==', username) | map(attribute='provider_name') | first %}
# upstream for {{ name }} on {{ provider }}
upstream backend_{{ username }} {
   ip_hash;
{% for port in upstream_ports | shuffle %}
{% set iptv_account = __proxy_users | selectattr('proxy_port', '==', port) | map(attribute='xtream_account') | first %}
{% set provider_username = role_iptvservice__credentials | map(attribute='provider_credentials') | flatten | selectattr('account', '==', iptv_account) | map(attribute='username') | first %}
   server {{ role_iptvservice__iptv_hostname | first }}:{{ port }}; # {{ iptv_account }} - {{ provider_username }}
{% endfor %}
}

{% endfor %}

# log_format
log_format main_ext '$remote_addr - $remote_user [$time_local] "$request" '
   '$status $body_bytes_sent "$http_referer" '
   '"$http_user_agent" '
   '$request_time $upstream_response_time $iptv_agents $upstream_addr $upstream_status';

# http / port 80
server {
   listen 80;
   server_name {{ role_iptvservice__iptv_hostname | join(' ') }};
{% if role_iptvservice__iptv_ssl_certificate is not defined and role_iptvservice__iptv_ssl_certificate_key is not defined %}
   access_log /var/log/nginx/{{ role_iptvservice__iptv_hostname | first }}_access.log main_ext;
   error_log /var/log/nginx/{{ role_iptvservice__iptv_hostname | first }}_error.log;
   index index.html index.php;
   root /var/www/html/{{ role_iptvservice__iptv_hostname | first }};

  location / {
    set $effective_username "";

    if ($request_uri ~ ^/live/([^/]+)/) {
      set $effective_username $1;
    }

    if ($request_uri ~ ^/vod/([^/]+)/) {
      set $effective_username $1;
    }

    if ($arg_username != "") {
      set $effective_username $arg_username;
    }

{% for item in __proxy_users | map(attribute='proxy_username') | unique | sort %}
{% set username = item %}
{% set name = __proxy_users | selectattr('proxy_username', '==', username) | map(attribute='proxy_name') | unique | first %}
{% set live = __proxy_users | selectattr('proxy_username', '==', username) | map(attribute='live') | first %}
{% set vod = __proxy_users | selectattr('proxy_username', '==', username) | map(attribute='vod') | first %}

    # Proxy for {{ name }}
    if ($effective_username = {{ name }}) {
      proxy_pass http://backend_{{ name }};
      break;
    }
{% endfor %}

    # PHP
    location ~ \.php$ {
      try_files $uri =404;
      fastcgi_pass unix:/var/run/php/php7.4-fpm.sock;
      fastcgi_index index.php;
      fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
      include fastcgi_params;
    }

{% else %}
   return 301 https://$server_name$request_uri;
{% endif %}
}

{% if role_iptvservice__iptv_ssl_certificate is defined and role_iptvservice__iptv_ssl_certificate_key is defined %}
# https / port 443
server {
   listen 443 ssl;
   server_name {{ role_iptvservice__iptv_hostname | join(' ') }};
   access_log /var/log/nginx/{{ role_iptvservice__iptv_hostname | first }}_access.log main_ext;
   error_log /var/log/nginx/{{ role_iptvservice__iptv_hostname | first }}_error.log;
   index index.html index.php;
   root /var/www/html/{{ role_iptvservice__iptv_hostname | first }};
   include /etc/nginx/snippets/letsencrypt.conf;

  location / {
    set $effective_username "";

    if ($request_uri ~ ^/live/([^/]+)/) {
      set $effective_username $1;
    }

    if ($request_uri ~ ^/vod/([^/]+)/) {
      set $effective_username $1;
    }

    if ($arg_username != "") {
      set $effective_username $arg_username;
    }

{% for item in __proxy_users | map(attribute='proxy_username') | unique | sort %}
{% set username = item %}
{% set name = __proxy_users | selectattr('proxy_username', '==', username) | map(attribute='proxy_name') | unique | first %}
{% set live = __proxy_users | selectattr('proxy_username', '==', username) | map(attribute='live') | first %}
{% set vod = __proxy_users | selectattr('proxy_username', '==', username) | map(attribute='vod') | first %}
    # Proxy for {{ name }}
    if ($effective_username = {{ name }}) {
      proxy_pass http://backend_{{ name }};
      break;
    }
{% endfor %}

   # Protected Paths
{% if role_iptvservice__protected_paths is defined and role_iptvservice__protected_paths | length > 0 %}
{% for item in role_iptvservice__protected_paths %}
   location {{ item.path }} {
   {% for arg in item.args %}
      {{ arg }}
   {% endfor %}
   }
{% endfor %}


   # PHP
   location ~ \.php$ {
      try_files $uri =404;
      fastcgi_pass unix:/var/run/php/php7.4-fpm.sock;
      fastcgi_index index.php;
      fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
      include fastcgi_params;
   }

   # SSL
   ssl_certificate {{ role_iptvservice__iptv_ssl_certificate }};
   ssl_certificate_key {{ role_iptvservice__iptv_ssl_certificate_key }};
}
{% endif %}